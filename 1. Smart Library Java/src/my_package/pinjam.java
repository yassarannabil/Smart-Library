/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my_package;

import com.mysql.jdbc.PreparedStatement;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;

/**
 *
 * @author AILEEN
 */
public class pinjam extends javax.swing.JFrame {
     public Connection con;
    public Statement stat;
    public ResultSet res;
    public PreparedStatement pstmt;

    public void koneksi() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/library", "root", "");
            stat = con.createStatement();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e);
        }
    }
    private void kosongkan() {
        studentid.setText("input title");
        bookid.setText("input author");
        quantitypinjam.setText("input quantity");
        DATE.setText("input date yyyy-mm-dd");
    }
        
    public void close() {
        WindowEvent closeWindow = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        java.awt.Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }
 
    public pinjam() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        bookid = new javax.swing.JTextField();
        quantitypinjam = new javax.swing.JTextField();
        studentid = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        DATE = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton3.setBackground(new java.awt.Color(237, 202, 151));
        jButton3.setText("back");
        jButton3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 60, -1));

        bookid.setBackground(new java.awt.Color(237, 202, 151));
        bookid.setText("input book id");
        bookid.setBorder(null);
        bookid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookidActionPerformed(evt);
            }
        });
        getContentPane().add(bookid, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 240, 420, 30));

        quantitypinjam.setBackground(new java.awt.Color(237, 202, 151));
        quantitypinjam.setText("input quantity");
        quantitypinjam.setBorder(null);
        quantitypinjam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantitypinjamActionPerformed(evt);
            }
        });
        getContentPane().add(quantitypinjam, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 310, 420, 30));

        studentid.setBackground(new java.awt.Color(237, 202, 151));
        studentid.setText("input Student Id");
        studentid.setBorder(null);
        studentid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentidActionPerformed(evt);
            }
        });
        getContentPane().add(studentid, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 180, 420, 30));

        jButton1.setBackground(new java.awt.Color(237, 202, 151));
        jButton1.setText("save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 440, -1, -1));

        jButton2.setBackground(new java.awt.Color(237, 202, 151));
        jButton2.setText("Pengembalian");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 20, 110, -1));

        DATE.setBackground(new java.awt.Color(237, 202, 151));
        DATE.setText("input day of returning yyyy-mm-dd");
        DATE.setBorder(null);
        DATE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DATEActionPerformed(evt);
            }
        });
        getContentPane().add(DATE, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 370, 430, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui_component/borrow (2).png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        close();
        home home  = new home();
        home.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void bookidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookidActionPerformed

    private void quantitypinjamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantitypinjamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantitypinjamActionPerformed

    private void studentidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studentidActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        koneksi();
              try {
                  // Validate if book and student IDs are not empty
                  if (bookid.getText().isEmpty() || studentid.getText().isEmpty() || quantitypinjam.getText().isEmpty()) {
                      JOptionPane.showMessageDialog(null, "Book ID, Student ID, and Quantity are required.");
                      return;
                  }

                  // Check if the quantity is a valid integer
                  try {
                      Integer.parseInt(quantitypinjam.getText());
                  } catch (NumberFormatException e) {
                      JOptionPane.showMessageDialog(null, "Quantity must be a valid integer.");
                      return;
                  }

                  // Check if the book exists and has enough quantity
                  String checkQuery = "SELECT quantity FROM buku WHERE id_buku = ?";
                  pstmt = (PreparedStatement) con.prepareStatement(checkQuery);
                  pstmt.setString(1, bookid.getText());
                  res = pstmt.executeQuery();

                  if (res.next()) {
                      int availableQuantity = res.getInt("quantity");

                      // Check if there is enough quantity for borrowing
                      int requestedQuantity = Integer.parseInt(quantitypinjam.getText());
                      if (availableQuantity >= requestedQuantity) {
                          // Proceed with the borrowing process
                          String insertQuery = "INSERT INTO pinjam (studentId, bookId, quantity, status_pinjam, TGLPINJAM) VALUES (?, ?, ?, 'Pinjam', ?)";
                          pstmt = (PreparedStatement) con.prepareStatement(insertQuery);
                          pstmt.setString(1, studentid.getText());
                          pstmt.setString(2, bookid.getText());
                          pstmt.setInt(3, requestedQuantity);
                          pstmt.setString(4, DATE.getText()); 
                          pstmt.executeUpdate();

                          // Update the quantity in the buku table
                          String updateQuery = "UPDATE buku SET quantity = quantity - ? WHERE id_buku = ?";
                          pstmt = (PreparedStatement) con.prepareStatement(updateQuery);
                          pstmt.setInt(1, requestedQuantity);
                          pstmt.setString(2, bookid.getText());
                          pstmt.executeUpdate();

                          // Notify the user about the successful borrowing
                          JOptionPane.showMessageDialog(null, "Book borrowed successfully.");
                          kosongkan(); // Clear the input fields
                      } else {
                          JOptionPane.showMessageDialog(null, "Not enough quantity available.");
                      }
                  } else {
                      JOptionPane.showMessageDialog(null, "Book not found.");
                  }
              } catch (Exception e) {
                  JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
              } finally {
                  // Close the PreparedStatement to avoid resource leaks
                  try {
                      if (pstmt != null) {
                          pstmt.close();
                      }
                  } catch (Exception e) {
                      e.printStackTrace();
                  }
    }    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        close();
        pengembalian pengembalian  = new pengembalian();
        pengembalian.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void DATEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DATEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DATEActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pinjam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pinjam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pinjam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pinjam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pinjam().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField DATE;
    private javax.swing.JTextField bookid;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField quantitypinjam;
    private javax.swing.JTextField studentid;
    // End of variables declaration//GEN-END:variables
}
